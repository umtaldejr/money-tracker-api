name: Docker Build & Push

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and test Docker images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # set latest tag for default branch
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            # set latest tag for main branch
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Money Tracker API
            org.opencontainers.image.description=A secure REST API for tracking financial transactions
            org.opencontainers.image.vendor=${{ github.repository_owner }}

      - name: Build and push development image
        if: github.ref == 'refs/heads/develop' || github.event_name == 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          target: development
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push production image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Image testing
  test-image:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Test image startup
        run: |
          docker run --rm --platform ${{ matrix.platform }} \
            --name test-container \
            -e NODE_ENV=production \
            -p 3000:3000 \
            -d ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Wait for container to start
          sleep 30
          
          # Test health endpoint
          curl -f http://localhost:3000/health || exit 1
          
          # Stop container
          docker stop test-container

  # Multi-registry push
  multi-registry:
    name: Push to Multiple Registries
    runs-on: ubuntu-latest
    needs: [build, test-image]
    if: github.ref == 'refs/heads/main' && startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        registry:
          - registry: docker.io
            username: DOCKER_USERNAME
            password: DOCKER_PASSWORD
          - registry: ghcr.io
            username: GITHUB_ACTOR
            password: GITHUB_TOKEN
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to ${{ matrix.registry.registry }}
        uses: docker/login-action@v3
        with:
          registry: ${{ matrix.registry.registry }}
          username: ${{ matrix.registry.username == 'GITHUB_ACTOR' && github.actor || secrets[matrix.registry.username] }}
          password: ${{ secrets[matrix.registry.password] }}

      - name: Extract metadata for ${{ matrix.registry.registry }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.registry.registry }}/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: Build and push to ${{ matrix.registry.registry }}
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Create release notes
  release-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    needs: [build, security-scan, test-image]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes
        id: release-notes
        run: |
          # Get the tag name
          TAG_NAME=${GITHUB_REF#refs/tags/}
          
          # Get previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 $TAG_NAME^ 2>/dev/null || echo "")
          
          # Generate changelog
          if [ -n "$PREV_TAG" ]; then
            echo "## Changes since $PREV_TAG" > RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
            git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> RELEASE_NOTES.md
          else
            echo "## Initial Release" > RELEASE_NOTES.md
          fi
          
          echo "" >> RELEASE_NOTES.md
          echo "## Docker Images" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "- \`ghcr.io/${{ github.repository }}:$TAG_NAME\`" >> RELEASE_NOTES.md
          echo "- \`ghcr.io/${{ github.repository }}:latest\`" >> RELEASE_NOTES.md
          
          # Set output
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          cat RELEASE_NOTES.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{ steps.release-notes.outputs.notes }}
          draft: false
          prerelease: false
