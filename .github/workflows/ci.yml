name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_ENV: test

jobs:
  # Code quality and linting
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check code formatting
        run: |
          if ! npm run lint -- --fix --dry-run; then
            echo "Code formatting issues found. Run 'npm run lint:fix' to fix them."
            exit 1
          fi

  # Test suite across multiple Node.js versions
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20, 21]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        if: matrix.node-version == '18'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Security audit and vulnerability check
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level high

      - name: Check for known vulnerabilities
        run: |
          if npm audit --audit-level high --json | grep -q '"vulnerabilities"'; then
            echo "High or critical vulnerabilities found!"
            npm audit --audit-level high
            exit 1
          fi

  # Docker build test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build development image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: development
          push: false
          tags: money-tracker-api:dev-test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build production image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: false
          tags: money-tracker-api:prod-test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test development container
        run: |
          docker run --rm --name test-dev \
            -e NODE_ENV=test \
            -d money-tracker-api:dev-test
          
          # Wait for container to start
          sleep 10
          
          # Run tests inside container
          docker exec test-dev npm test
          
          # Stop container
          docker stop test-dev

  # Integration tests with services
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: test
          POSTGRES_DB: money_tracker_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for services
        run: |
          sleep 10
          pg_isready -h localhost -p 5432 -U test
          redis-cli -h localhost -p 6379 ping

      - name: Run integration tests
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: money_tracker_test
          DB_USER: test
          DB_PASSWORD: password
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: npm test

  # Performance and load testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start application
        run: |
          npm start &
          APP_PID=$!
          echo "APP_PID=$APP_PID" >> $GITHUB_ENV
          sleep 10

      - name: Install autocannon for load testing
        run: npm install -g autocannon

      - name: Run performance tests
        run: |
          # Basic load test
          autocannon -c 10 -d 30s http://localhost:3000/health
          
          # API endpoint test
          autocannon -c 5 -d 15s http://localhost:3000/

      - name: Stop application
        run: kill $APP_PID

  # Deployment readiness check
  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [lint, test, security, docker-build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if ready for deployment
        run: |
          echo "âœ… All checks passed!"
          echo "ðŸ“¦ Ready for deployment to staging"
          echo "ðŸš€ Triggering deployment workflow..."

      - name: Trigger deployment
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: deploy-staging
          client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'
